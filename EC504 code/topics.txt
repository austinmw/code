Topics
------
Basic Data Structures
Algorithm Complexity
Recurrences
Sorting
- comparison sorts (e.g. merge sort)              
- non-comparison sorts (e.g. bucket sort)       radix sort     heap sort
Heaps- me
Hashing -ME
Binary Search Trees
BST balancing
Red-Black Trees
Skip Lists -ME

Format
------
Open book, open notes, open computer, with partner.
Four questions:
1 Question on complexity/recurrences
1 Question on sorting -me
1 Question on search trees and balancing
1 Question on design (selection of data structure based on program requirements) -me
 
Submission
-------------
 
Submission will be though Dropbox. Answers must be typed, but I wont ask you to make compilable/runnable code.




hat we have covered so far
---------------------------

Week One
--------

simple linear data structures (stacks, queues, linked lists)
  Chapter 10

- algorithm complexity notation, especially big O, theta
  Chapter 3,4

Week Two
--------

- heaps and heap sort, Chapter 6
- hashing and dictionaries (in Python), Chapter 11
- binary search trees: construction and use, Chapter 12

Week Three
----------

 - linear sort algorithms: counting and bucket sort

Week Four
---------
 
  - binary search trees
  - STL containers in C++
  


-complexity
-queue
-stack
-list
-linked list
-doubly linked list
-skip lists
-dictionary
-anagrams
-binary search tree
-bubble sort
-merge sort
-not comparison sorts
-stdlib sort
-insertion sort
-quick sort
-other bst
-map
-red black tree
-splay tree
-homeworks
-master method
-recurrance relations





Notes:





LINKED LIST
address of the head node gives access to the complete list
address in last node is null or 0
have to traverse from head
to insert, create node and then link previous and next nodes 
  need to traverst list to insert also, so O(n) worst-case
access time is not constant like arrays, worst case O(n)
in C++ can be implemented with a struct
Struct Node
{
  int data;
  Node* next;  
}

